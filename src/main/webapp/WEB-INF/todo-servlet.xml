<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:context="http://www.springframework.org/schema/context"
    	
    	 											xmlns:tx="http://www.springframework.org/schema/tx"
    
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        
         											http://www.springframework.org/schema/tx
        											http://www.springframework.org/schema/tx/spring-tx.xsd
        
        ">
        
        
        										 	<tx:annotation-driven />
	
	<context:component-scan base-package="com"/>
	
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<!-- the class name can be found by pressing ctrl+shift+t inside a java class in eclipse and typing internares -->
					<!-- the class name can also be found from interet -->
					
						<!-- the properties come from inside the viewResolver class --> 
					<property name="prefix" value="/WEB-INF/pages/"/> 
						<!-- Spring will look for the page in the /WEB-INF/pages/ directory -->
					<property name="suffix" value=".jsp"/> 
						<!-- The webpages will end with .jsp extension -->
	</bean>
	
	<bean class="org.springframework.jdbc.datasource.DriverManagerDataSource" name="dataSource">
			<!-- Providing the class-name for dataSource -->
	<property name="driverClassName" value="com.mysql.jdbc.Driver" />
			<!-- Providing the driver class-->
	<property name="url" value="jdbc:mysql://localhost:3306/todomanager" />
			<!-- Providing the location of the endpoint of db-->
	<property name="username" value="root" />
			<!-- Providing the username of the database-->
	<property name="password" value="root123" />
			<!-- Providing the password for the db -->
	</bean>
	<bean class="org.springframework.orm.hibernate5.LocalSessionFactoryBean" name="sessionFactory">
	<property name="dataSource" ref="dataSource" />
			<!--Note we are using ref instead of value as we are not assigning a value but rather referencing the already created object above -->
			
			
	<property name="hibernateProperties">
		<!--we need to configure the hibernate properties-->
		<props>
			<!--We are using props tag as the property class(variable hibernateProperties's type) 
			 does not have a single value but rather consist of multiple values which we 
			clarify using 'prop' tag inside 'props' tag -->
			
			<prop key="hibernate.dialect">org.hibernate.dialect.MySQL57Dialect</prop>
				<!--To get this full value of the prop key in eclipse we write 'mysql' after ctrl+shit+t -->
			<prop key="hibernate.hbm2ddl.auto">update</prop>
				<!--Auto Table creation -->
			<prop key="hibernate.show_sql">true</prop>
				<!--To see the full sql in the console when hibernate query runs -->
		</props>
		
	</property>
		
		<!-- NOW we need to mention the entities -->
	<property name="annotatedClasses">
	
	<list>
		<!--We will be using list tag as the "annotatedClasses" variable is list
		Each item of the list must be separated by a value tag
		 -->
		<value> 
			com.entities.Todo
		</value>
	</list>
	</property>
	
	
	</bean>
	
	<bean class="org.springframework.orm.hibernate5.HibernateTemplate" name="hibernateTemplate">
	
		<property name="sessionFactory" ref="sessionFactory" />
	
	</bean>
	
	<bean class="org.springframework.orm.hibernate5.HibernateTransactionManager" name="transactionManager">
	<property name="sessionFactory" ref="sessionFactory"> </property>
		<!-- we need to pass our sessionFactory object into it-->
	</bean>
	
    <mvc:annotation-driven />

</beans>